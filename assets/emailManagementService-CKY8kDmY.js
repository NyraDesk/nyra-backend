import{G as c}from"./index-Dh14THqw.js";class l{getAccessToken(){try{const r=localStorage.getItem("nyra_user"),s=r?JSON.parse(r).email:null;if(!s)return null;const e=localStorage.getItem(`nyra_oauth_${s}`);if(e){const a=JSON.parse(e);if(new Date(a.expires_at)>new Date)return a.access_token}return null}catch(r){return console.error("Error getting access token:",r),null}}async manageEmail(r){try{const s=this.getAccessToken();if(!s)return{success:!1,message:"Token di accesso non disponibile"};const e=new c(s);switch(r.operation){case"mark-read":return await this.markAsRead(e,r);case"mark-unread":return await this.markAsUnread(e,r);case"delete":case"move-to-trash":return await this.moveToTrash(e,r);case"archive":return await this.archiveEmail(e,r);default:return{success:!1,message:"Operazione non supportata"}}}catch(s){return console.error("Error managing email:",s),{success:!1,message:"Errore nella gestione email"}}}async searchEmails(r){try{const s=this.getAccessToken();if(!s)return{success:!1,emails:[],count:0,error:"Token di accesso non disponibile"};const e=new c(s);let a=r.query;if(r.filter)switch(r.filter){case"has-attachment":a+=a?" AND ":"",a+="has:attachment";break;case"important":a+=a?" AND ":"",a+="is:important";break;case"unread":a+=a?" AND ":"",a+="is:unread";break;case"sent":a+=a?" AND ":"",a+="from:me";break;case"received":a+=a?" AND ":"",a+="to:me";break}const o=r.count||10,t=await e.getMessagesWithQuery(o,a);if(!t||t.length===0)return{success:!0,emails:[],count:0};const n=[];for(const i of t){const m=await e.getMessage(i.id);n.push(m)}return{success:!0,emails:n,count:n.length}}catch(s){return console.error("Error searching emails:",s),{success:!1,emails:[],count:0,error:s instanceof Error?s.message:"Errore nella ricerca"}}}async markAsRead(r,s){try{const e=await this.getTargetMessageId(r,s);return e?(await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}/modify`,{method:"POST",headers:{Authorization:`Bearer ${this.getAccessToken()}`,"Content-Type":"application/json"},body:JSON.stringify({removeLabelIds:["UNREAD"]})}),{success:!0,message:"Email marcata come letta"}):{success:!1,message:"Email non trovata"}}catch(e){return console.error("Error marking as read:",e),{success:!1,message:"Errore nel marcare come letta"}}}async markAsUnread(r,s){try{const e=await this.getTargetMessageId(r,s);return e?(await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}/modify`,{method:"POST",headers:{Authorization:`Bearer ${this.getAccessToken()}`,"Content-Type":"application/json"},body:JSON.stringify({addLabelIds:["UNREAD"]})}),{success:!0,message:"Email marcata come non letta"}):{success:!1,message:"Email non trovata"}}catch(e){return console.error("Error marking as unread:",e),{success:!1,message:"Errore nel marcare come non letta"}}}async moveToTrash(r,s){try{const e=await this.getTargetMessageId(r,s);return e?(await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}/trash`,{method:"POST",headers:{Authorization:`Bearer ${this.getAccessToken()}`}}),{success:!0,message:"Email spostata nel cestino"}):{success:!1,message:"Email non trovata"}}catch(e){return console.error("Error moving to trash:",e),{success:!1,message:"Errore nello spostare nel cestino"}}}async archiveEmail(r,s){try{const e=await this.getTargetMessageId(r,s);return e?(await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}/modify`,{method:"POST",headers:{Authorization:`Bearer ${this.getAccessToken()}`,"Content-Type":"application/json"},body:JSON.stringify({removeLabelIds:["INBOX"]})}),{success:!0,message:"Email archiviata"}):{success:!1,message:"Email non trovata"}}catch(e){return console.error("Error archiving email:",e),{success:!1,message:"Errore nell'archiviare email"}}}async getTargetMessageId(r,s){if(s.emailId)return s.emailId;if(s.target==="latest"){const e=await r.getMessages(1);return e.length>0?e[0].id:null}if(s.target==="search"&&s.query){const e=await r.getMessagesWithQuery(1,s.query);return e.length>0?e[0].id:null}return null}}const h=new l;export{l as EmailManagementService,h as emailManagementService};
